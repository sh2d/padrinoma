# Repository

The development repository is currently hosted at
[GitHub](https://github.com/sh2d/padrinoma/).  Bugs and a wish list can
be found in the
[issue tracker](https://github.com/sh2d/padrinoma/issues/).


## Code language

Main development languages are Lua and TeX.


## Code documentation

Lua code documentation is in
[LuaDoc](http://keplerproject.github.com/luadoc/) format and can be
generated via

    luadoc -d API *.lua


## Repository layout

What does it take to implement Liang's hyphenation algorithm in LuaTeX?

1. Code to traverse a node list and to identify words.
2. An implementation of Liang's pattern matching algorithm for the words
  encountered during node list traversal.

Files related to node list traversal tend to reside in directory
`lua-modules`.  Files related to pattern matching tend to reside in
directory `lua-classes`.

Incidentally, both items mentioned above are already part of LuaTeX.
Though, in part not accessible from within the document level.  As
LuaTeX is about ‘upening-up TeX’, the author hopes that the code in this
repository will become redundant one day.



# Some design decisions

## Lua and OOP

As far as Lua code makes use of the OOP paradigm, classes are derived
from a base class (module) `cls_pdnm_oop.lua`.  This class implements a
proto-type based OOP scheme following the approach presented in the book
_Programming in Lua_ by R. Ierusalimschy, of which the first edition is
also [available online](http://www.lua.org/pil/contents.html).

Note that OOP is only used for sake of flexibility during development.
It makes perfect sense to consider refactoring any OOP code into a
single Lua module later.


## File names

Because this software is intended to be included into TeX distributions,
file names are an issue.  Where it seems appropriate, the prefix `pdnm`
is used as a pseudo name space in file names of this software.  As an
example, the Lua base class can be found in a file named
`cls_pdnm_oop.lua`.


## Call-back names

Call-back function names consist of an actual name and a prefix,
separated by two underscores.  The prefix starts with the string `cb_`
followed by a string refering to the class providing the call-back.

As an example, class `cls_pdnm_pattern` provides a call-back
`cb_pdnm_pattern__decomposition_start`.



# Patches welcome!

Thanks!



<!--
%%% Local Variables: 
%%% coding: utf-8
%%% mode: markdown
%%% End: 
-->
