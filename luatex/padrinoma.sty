%% -*- coding: utf-8 -*-
%%
%% Copyright 2014 Stephan Hennig
%%
%% This file is part of Padrinoma.
%%
%% Padrinoma is free software: you can redistribute it and/or modify it
%% under the terms of the GNU Affero General Public License as published
%% by the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%%
%% Padrinoma is distributed in the hope that it will be useful, but
%% WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%% Affero General Public License for more details.
%%
%% You should have received a copy of the GNU Affero General Public
%% License along with Padrinoma.  If not, see
%% <http://www.gnu.org/licenses/>.
%%
%% Diese Datei ist Teil von Padrinoma.
%%
%% Padrinoma ist Freie Software: Sie können es unter den Bedingungen der
%% GNU Affero General Public License, wie von der Free Software
%% Foundation, Version 3 der Lizenz oder (nach Ihrer Wahl) jeder
%% späteren veröffentlichten Version, weiterverbreiten und/oder
%% modifizieren.
%%
%% Padrinoma wird in der Hoffnung, dass es nützlich sein wird, aber OHNE
%% JEDE GEWÄHELEISTUNG, bereitgestellt; sogar ohne die implizite
%% Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN
%% ZWECK.  Siehe die GNU Affero General Public License für weitere
%% Details.
%%
%% Sie sollten eine Kopie der GNU Affero General Public License zusammen
%% mit diesem Programm erhalten haben. Wenn nicht, siehe
%% <http://www.gnu.org/licenses/>.
%%
\RequirePackage{expl3}
\ProvidesExplPackage{padrinoma}{2014/08/19}{0.2}{Pattern driven node manipulation in LuaTeX (SH)}
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
% Test for the LuaTeX engine.
\msg_new:nnn{padrinoma}{bad-engine}{LuaTeX~engine~required.~You~could~try~with~the~`lua(la)tex'~command.}
\luatex_if_engine:TF{}{\msg_fatal:nn{padrinoma}{bad-engine}}
% Lua module version management.
\RequirePackage{luatexbase-modutils}
% LuaTeX call-back management.
\RequirePackage{luatexbase-mcb}
% Load padrinoma manipulation module.
\directlua name {padrinoma}{
  % Reserve a global variable for our namespace.
  padrinoma = {}
  padrinoma.nlm = require('pdnm_nl_manipulation')
}
% We use expl3 syntax.
\RequirePackage{xparse}
% Package interface uses key-value syntax.
\RequirePackage{l3keys2e}
% Declare keys.
\keys_define:nn {padrinoma} {
  language .tl_set:N = \l_pdnm_opt_language_tl,
  language .value_required:,
  patterns .tl_set:N = \l_pdnm_opt_patterns_tl,
  patterns .value_required:,
  module .tl_set:N = \l_pdnm_opt_module_tl,
  module .value_required:,
  id .tl_set:N = \l_pdnm_opt_id_tl,
  id .value_required:,
  debug .bool_set:N = \l_pdnm_opt_debug_bool,
  debug .default:n = false,
}
% Provide command for registering a manipulation.
% Parameters are a key=value list.  Valid keys are:
%  patterns - name of a pattern file (full file name),
%  language - a TeX language identifier,
%  module - name of a Lua module implementing a manipulation (base file name),
%  id - a unique ID for the manipulation (interpreted as a Lua string),
%  debug - a boolean determining if debugging information is written to a file,
\NewDocumentCommand\PadrinomaRegisterManipulation{m}{%
  \keys_set:nn {padrinoma} {#1}%
  % Get language number.
  \int_new:N\l_pdnm_language_number_int
  \int_set:Nn\l_pdnm_language_number_int{\int_use:c{l@\l_pdnm_opt_language_tl}}%
  % Call Lua API of padrinoma package.
  \directlua{
    padrinoma.nlm.register_manipulation(
      \int_use:N\l_pdnm_language_number_int,
      '\luaescapestring{\l_pdnm_opt_patterns_tl}',
      '\luaescapestring{\l_pdnm_opt_module_tl}',
      '\luaescapestring{\l_pdnm_opt_id_tl}',
      \bool_if:NTF\l_pdnm_opt_debug_bool{true}{false}
    )
  }%
}
